<xml>

    <echo value="###########################################################"/>
    <echo value="            Android Unreal Engine Toolchain"/>
    <echo value="               HXCPP_CLANG=${HXCPP_CLANG}"/>
    <echo value="               CLANG_VERSION=${CLANG_VERSION}"/>
    <echo value="               TOOLCHAIN_VERSION=${TOOLCHAIN_VERSION}"/>
    <echo value="               PLATFORM=${PLATFORM}"/>
    <echo value="###########################################################"/>

    <!-- Android TOOLS ------------------------------------ -->
    <!--
      Configure build via variables, otherwise defaults will be used:
         Set the path to the exact ndk to use with ANDROID_NDK_ROOT,
            or set where all your ndks are installed with ANDROID_NDK_DIR and hxcpp will guess.
            Set the version number by setting the variable:
               NDKV?? - base version of ndk to use, hxcpp will find the letter, like "NDKV10" -> may end up with "10c"
         TOOLCHAIN_VERSION - the compiler number, like "4.8" or "4.4.3"
         PLATFORM - the android platform api level, like "android-19"
                  - you can also set the variable "android-19" directly
    -->

    <!--
    UBT params sample:

     -target armv7-none-linux-androideabi
     --sysroot="C:/NVPACK/android-ndk-r10e/platforms/android-21/arch-arm"
     -gcc-toolchain "C:/NVPACK/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64"
     -c
     -fdiagnostics-format=msvc
     -Wall -Wno-unused-variable -Wno-unused-function -Wno-switch -Wno-tautological-compare -Wno-unused-private-field
     -Wno-local-type-template-args -Wno-return-type-c-linkage -Wno-reorder -Wno-unknown-pragmas -Wno-invalid-offsetof
     -Wno-logical-op-parentheses -Wshadow -Wno-error=shadow -Wno-undefined-bool-conversion
     -Wno-gnu-string-literal-operator-template -Wno-unused-local-typedef -Wno-inconsistent-missing-override
     -g2 -gdwarf-2 -O3 -funwind-tables -fstack-protector -fno-strict-aliasing -fpic
     -fno-exceptions -fno-rtti
     -fno-short-enums -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -ffunction-sections -fsigned-char -Werror
     -x c++ -std=c++11 -O3

 -I"C:/NVPACK/android-ndk-r10e/sources/cxx-stl/gnu-libstdc++/4.9/include"
 -I"C:/NVPACK/android-ndk-r10e/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include"
 -I"C:/NVPACK/android-ndk-r10e/sources/android/native_app_glue"
 -I"C:/NVPACK/android-ndk-r10e/sources/android/cpufeatures"




    -->

    <setup name="androidNdk"/>

    <!-- Set architecture -->
    <section if="HXCPP_X86">
        <set name="CLANG_TARGET" value="i686-none-linux-android"/>
        <set name="ARCH" value="-x86"/>
        <set name="ABI" value="x86"/>
        <set name="PLATFORM_ARCH" value="arch-x86"/>
        <set name="TOOLCHAIN" value="x86-${TOOLCHAIN_VERSION}"/>
        <set name="EXEPREFIX" value="i686-linux-android"/>
    </section>

    <section if="HXCPP_ARMV7">
        <set name="CLANG_TARGET" value="armv7-none-linux-androideabi"/>
        <set name="ARCH" value="-v7"/>
        <set name="ABI" value="armeabi-v7a"/>
        <set name="PLATFORM_ARCH" value="arch-arm"/>
        <set name="TOOLCHAIN" value="arm-linux-androideabi-${TOOLCHAIN_VERSION}"/>
        <set name="EXEPREFIX" value="arm-linux-androideabi"/>
    </section>

    <section if="HXCPP_ARM64">
        <set name="CLANG_TARGET" value="aarch64-none-linux-android"/>
        <set name="ARCH" value="-64"/>
        <set name="ABI" value="arm64-v8a"/>
        <set name="PLATFORM_ARCH" value="arch-arm64"/>
        <set name="TOOLCHAIN" value="aarch64-linux-android-${TOOLCHAIN_VERSION}"/>
        <set name="EXEPREFIX" value="aarch64-linux-android"/>
    </section>

    <set name="prebuiltBase" value="${ANDROID_NDK_ROOT}/toolchains/${TOOLCHAIN}/prebuilt/${ANDROID_HOST}"/>
    <set name="CLANG_EXE"
         value="${ANDROID_NDK_ROOT}/toolchains/llvm-${CLANG_VERSION}/prebuilt/${ANDROID_HOST}/bin/clang++"/>

    <path name="${prebuiltBase}/bin"/>

    <!--<set name="HXCPP_AR" value="${EXEPREFIX}-ar"/>-->
    <set name="HXCPP_AR" value="${EXEPREFIX}-ar"/>

    <include name="toolchain/gcc-toolchain.xml"/>

    <compiler id="android-gcc" exe="g++">

        <exe name="${CLANG_EXE}"/>

        <!-- Engine\Source\Programs\UnrealBuildTool\Android\UEBuildAndroid.cs -->

        <!-- These must appear in this order! -->
        <flag value="--sysroot=${ANDROID_NDK_ROOT}/platforms/${PLATFORM}/${PLATFORM_ARCH}"/>
        <flag value="--target=${CLANG_TARGET}"/>
        <flag value="--gcc-toolchain=${prebuiltBase}"/>

        <flag value="-I${ANDROID_NDK_ROOT}/sources/cxx-stl/gnu-libstdc++/${TOOLCHAIN_VERSION}/include"/>
        <flag value="-I${ANDROID_NDK_ROOT}/sources/cxx-stl/gnu-libstdc++/${TOOLCHAIN_VERSION}/libs/${ABI}/include"/>

        <!--<flag value="-I${ANDROID_NDK_ROOT}/sources/android/native_app_glue"/>-->
        <!--<flag value="-I${ANDROID_NDK_ROOT}/sources/android/cpufeatures"/>-->

        <!-- Engine/Source/Programs/UnrealBuildTool/Android/AndroidToolChain.cs -->
        <flag value="-fdiagnostics-format=msvc"/>

        <!--<flag value="-Wall"/>-->
        <!--<flag value="-Werror"/>-->

        <!--<flag value="-Wno-unused-variable"/>-->
        <!--<flag value="-Wno-unused-function"/>-->
        <!--<flag value="-Wno-switch"/>-->
        <!--<flag value="-Wno-tautological-compare"/>-->
        <!--<flag value="-Wno-unused-private-field"/>-->
        <!--<flag value="-Wno-local-type-template-args"/>-->
        <!--<flag value="-Wno-return-type-c-linkage"/>-->
        <!--<flag value="-Wno-reorder"/>-->
        <!--<flag value="-Wno-unknown-pragmas"/>-->
        <flag value="-Wno-invalid-offsetof"/>
        <!--<flag value="-Wno-logical-op-parentheses"/>-->

        <!--&lt;!&ndash;<flag value="-Wshadow"/>&ndash;&gt;-->
        <!--&lt;!&ndash;<flag value="-Wno-error=shadow"/>&ndash;&gt;-->

        <!--if (ClangVersionFloat >= 3.5f)-->
        <!--<flag value="-Wno-undefined-bool-conversion"/>-->
        <!--<flag value="-Wno-gnu-string-literal-operator-template"/>-->

        <!--if (ClangVersionFloat >= 3.6f)-->
        <!--<flag value="-Wno-unused-local-typedef"/>-->
        <!--<flag value="-Wno-inconsistent-missing-override"/>-->

        <!--if (CompileEnvironment.Config.Target.Configuration == CPPTargetConfiguration.Shipping)-->
        <!--<flag value="-Wno-unused-value"/>-->


        <flag value="-g2"/>
        <flag value="-gdwarf-2"/>

        <flag value="-O3"/>


        <include name="toolchain/common-defines.xml"/>

        <flag value="-I${HXCPP}/include"/>
        <flag value="-Iinclude"/>

        <section if="HXCPP_ARMV7">

            <flag value="-funwind-tables"/>
            <flag value="-fstack-protector"/>
            <flag value="-fno-strict-aliasing"/>
            <flag value="-fpic"/>

            <!--<flag value="-ffno-exceptions"/>-->
            <!--<flag value="-fno-rtti"/>-->

            <flag value="-fno-short-enums"/>

            <flag value="-march=armv7-a"/>
            <flag value="-mfloat-abi=softfp"/>
            <flag value="-mfpu=vfpv3-d16"/>

            <!--<flag value="-fno-omit-frame-pointer" if="debug"/>-->
            <!--<flag value="-fno-function-sections" if="debug"/>-->
            <flag value="-ffunction-sections"/>

            <flag value="-fsigned-char"/>
        </section>

        <section if="HXCPP_ARM64">
            <flag value="-funwind-tables"/>
            <flag value="-fstack-protector"/>
            <flag value="-fno-strict-aliasing"/>
            <flag value="-fpic"/>

            <!--<flag value="-ffno-exceptions"/>-->
            <!--<flag value="-fno-rtti"/>-->

            <flag value="-fno-short-enums"/>
            <flag value="-march=armv8-a"/>
            <flag value="-ffunction-sections" unles="debug"/>

            <flag value="-fsigned-char"/>
        </section>

        <section if="HXCPP_X86">
            <flag value="-DANDROID_X86"/>

            <flag value="-fstrict-aliasing"/>
            <flag value="-fno-omit-frame-pointer"/>
            <flag value="-fno-strict-aliasing"/>
            <flag value="-fno-short-enums"/>
            <!--<flag value="-fno-exceptions"/>-->
            <!--<flag value="-fno-rtti"/>-->
            <flag value="-march=atom"/>
        </section>


        <cppflag value="-frtti"/>
        <flag value="-fexceptions"/>

        <!--<cflag value="-x c"/>-->
        <!--<cppflag value="-x c++"/>-->

        <cppflag value="-std=c++11"/>
        <flag value="-DHXCPP_CPP11"/>

        <!--<pchflag value="-x  c++-header"/>-->
        <!--<pchflag value="-std=c++11"/>-->

        <flag value="-D_LINUX_STDDEF_H "/> <!-- Avoid compiler including 2 version of file -->

        <flag value="-DANDROID=ANDROID"/>
        <flag value="-DHX_ANDROID"/>
        <flag value="${ANDROID_PLATFORM_DEFINE}"/>
        <flag value="-DNDEBUG"/>
        <flag value="-DHXCPP_LOAD_DEBUG" if="HXCPP_LOAD_DEBUG"/>

        <flag value="-c"/>
        <outflag value="-o"/>
        <ext value=".obj"/>
        <objdir value="obj/android${OBJEXT}${ARCH}"/>
    </compiler>

    <!--<linker id="dll" exe="g++">-->
        <!--<echo value="################################### ANDROID UE LINKER 1"/>-->

        <!--<exe name="${CLANG_EXE}" if="HXCPP_CLANG"/>-->


        <!--<ext value=".so"/>-->
        <!--<outflag value="-o"/>-->
        <!--<prefix value="lib"/>-->

        <!--<flag value="-frtti"/>-->

        <!--<flag value="-nostdlib"/>-->
        <!--<flag value="-Wl,-shared,-Bsymbolic"/>-->
        <!--<flag value="-Wl,&#45;&#45;no-undefined"/>-->

        <!--<flag value="&#45;&#45;sysroot=${ANDROID_NDK_ROOT}/platforms/${PLATFORM}/${PLATFORM_ARCH}"/>-->
        <!--<flag value="&#45;&#45;target=${CLANG_TARGET}"/>-->
        <!--<flag value="&#45;&#45;gcc-toolchain=${prebuiltBase}"/>-->

        <!--<section if="HXCPP_ARMV7">-->
            <!--<flag value="-march=armv7-a5"/>-->
            <!--<flag value="-Wl,&#45;&#45;fix-cortex-a8"/>-->
        <!--</section>-->

        <!--<section if="HXCPP_ARM64">-->
            <!--<flag value="-march=armv8-a"/>-->
        <!--</section>-->

        <!--<section if="HXCPP_X86">-->
            <!--<flag value="-march=atom"/>-->
        <!--</section>-->

        <!--<flag value="-fuse-ld=gold"/>-->

        <!--&lt;!&ndash;-->
                   <!--// Add path to statically compiled version of cxa_demangle-->
                   <!--InBuildTarget.GlobalLinkEnvironment.Config.LibraryPaths.Add(UEBuildConfiguration.UEThirdPartySourceDirectory + "Android/cxa_demangle/armeabi-v7a");-->
                   <!--InBuildTarget.GlobalLinkEnvironment.Config.LibraryPaths.Add(UEBuildConfiguration.UEThirdPartySourceDirectory + "Android/cxa_demangle/arm64-v8a");-->
                   <!--InBuildTarget.GlobalLinkEnvironment.Config.LibraryPaths.Add(UEBuildConfiguration.UEThirdPartySourceDirectory + "Android/cxa_demangle/x86");-->
                   <!--InBuildTarget.GlobalLinkEnvironment.Config.LibraryPaths.Add(UEBuildConfiguration.UEThirdPartySourceDirectory + "Android/cxa_demangle/x64");-->

                  <!--InBuildTarget.GlobalLinkEnvironment.Config.AdditionalLibraries.Add("cxa_demangle");-->
           <!--&ndash;&gt;-->
        <!--<flag value="-L${ANDROID_NDK_ROOT}/sources/cxx-stl/gnu-libstdc++/${TOOLCHAIN_VERSION}/libs/${ABI}"/>-->
        <!--<flag value="-L${ANDROID_NDK_ROOT}/platforms/${PLATFORM}/${PLATFORM_ARCH}/usr/lib"/>-->
        <!--<flag value="-L${prebuiltBase}/lib/gcc/${EXEPREFIX}/${TOOLCHAIN_VERSION}"/>-->
        <!--<flag value="-L${ANDROID_NDK_ROOT}/platforms/${PLATFORM}/${PLATFORM_ARCH}/usr/lib"/>-->

        <!--<lib name="-lgnustl_shared"/>-->
        <!--<lib name="-lgcc"/>-->
        <!--<lib name="-lz"/>-->
        <!--<lib name="-lc"/>-->
        <!--<lib name="-lm"/>-->
        <!--<lib name="-llog"/>-->
        <!--<lib name="-ldl"/>-->
        <!--<lib name="-landroid"/>-->
    <!--</linker>-->



</xml>
